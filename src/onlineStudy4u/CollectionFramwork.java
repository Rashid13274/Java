package onlineStudy4u;

public class CollectionFramwork {

	public static void main(String[] args) {
/*
 * COLLECTION FRAMEWORK:-
 * THE COLLECTION FRAMEWORK  PROVIDES  A WELL DESIGNED  SET OF  INTERFACES AND  CLASSES FOR STORING AND MANUPULATING  GROUP  OF DATA  AS A SINGLE UNIT
 * COLLECTION FRAMEWORK CONTAINS THREE THINGS:-
 * 1.  INTERFACES
 * 2.  IMPLEMENTATION 
 * 3.  ALGORITHAM
 *  
 *  LIMITATION OF ARRAY:-
 *  SIMILAR TYPE OF VALUE (HOMOGENIOUS)  CAN ONLY STORE  IN ARRAY.
 *  IT HAS STATIC SIZE I.E SIZE OF THE MUST KNOWN.
 *  OPERATION  -------> INSERTING IN MIDDLE {EXTRACTING
 *  										REMOVING
 *  										SORTING 
 *  										ASSENDING
 *  
 *  ADVANTAGES  OF COLLECTION  FRAMEWORK:-
 *  IN COLLECTION FRAMEWORK  GROUP  OF DATA REPRESENTED AS A  SINGLE  ENTITY.
 *  ITS SIZE  IS EXPENDABLE  DYNAMICALLY.
 *  STORING OF  HOMOGENIOUS  AND HETROGENIOUS  DATA IS POSSIBLE .
 *  ALL  COLLECTION  FRAMWORK  IS IMPLEMENTED  BY STANDERED DATA STRUCTURES. 
 *  IT ACTS  AS AN  ABSTRACT  DATA TYPE.(EVERY DATA STRUCTURE HAS ITS OWN STRUCTURE AND METHOD).
 *  
 *  
 *  WHEN TO USE ARRAY VS  COLLECTION FRMAWORK:-
 *  SIZE IS KNOWN  ------->  ARRAY IS BETTER
 *  HEAVY OPERATION  ------>  COLLECTION  IS BETTER.
 *  
 *  COLLECTION PROVIDES   FLEXBILITY  IN MEMORY BUT  IT INCREASES  THE  TIME COMPLEXCITY. 
 *  
 *  
 *  
 *  MAP:-
 *  IT IS USED  TO REPRESENT  GROUP OF  OBJECT AS KEY VALUE PAIRS. 
 *  MAP IS NOT  A CHILD  INTERFACE OF COLLECTION  
 *  KEY  AND VALUE BOTH ARE OBJECTS.
 *  KEYS MUST  BE UNIQUE BUT  VALUE CAN REPEAT
 *  hashmap,linkedhashmap,weakhashedmap,  etc are exmaples.
 *  
 *  
 *  list(I):-
 *  DUPLICATES ARE ALLOWED. 
 *  INSERTION  ORDER IS  PRESERVED.
 *  WE CAN DIFFERENIATE  DUPLICATES USING  INDEX
 *  WE CAN PRESEVES INSERTION  ORDER USING  INDEX , HENCE  INDEX PLAY AN IMPORTANT  ROLE IN  LIST  INTERFACE.
 *  
 *  ARRAYLIST:-
 *  UNDERLYING  DATA STRUCTURES. (MEANS IT HAS BEEN DEVELOPED USING DATA STUCTURES i.e array)
 *  RISIZABLE  OR GROWABLE  ARRAY.
 *  DUPLICATES ARE ALLOWED.
 *   INSERTION ORDER  IS PRESERVED .
 *   HETROGENIOUS  OBJECT  ARE ALLOWED. 
 *   NULL INSERTION  IS POSSIBLE.
 *   IT IMPLEMENTS  "RANDOM ACCESS"  INTERFACE , SO WE CAN  ACCESS ANY  RANDOM  ELEMENT  WITH  THE SAME   SPEED. 
 *   
 *   
 *   LINKEDLIST:-
 *   UNDERLYING DATA STRUCTURE
 *   INSERTION ORDERR  PRESERVED
 *   DUPLICATION ARE ALLOWED
 *   HETROGENIOUS  OBJECTS ARE ALLOWED. 
 *   NULL INSERTION IS POSSIBLE
 *   LINKED LIST  IMPLEMENTS "SEIALIZABLE" AND "CLONEABLE" INTERFACE ,  BUT  NOT "RANDOM ACESS" INTERFACE. 
 *   BEST  CHOICE  IF THE   FREQUENT OPERATUON  IS INSERTION  OR DELETION IN MIDDLE. 
 *   LINKED LIST IS WROST CHOICE FOR  RETRIVAL OPERATION.
 *   
 *   VECTOR:- 
 *   SIMILAR TO ARRAYLIST , ONLY DIFFERENCE IS  ARRAYLIST IS NOT  THREADSAFE BUT VECTOR IS THREAD SAFE.(MEANS IN A VECTOR AT A POINT   a ELEMENT CAN BE ACCESSED 
 *   BY ONE ONE ELEMENT. NOT MULTIPLE.
 *   RESIZABLE  / GROWABLE  ARRAYS.
 *   DUPLICATES ARE  ALLOWED.
 *   INSERTION ORDER IS  PRESERVED.
 *   NULL INSERTION  IS POSSIBLE.
 *   HETROGENIOUS  OBJECTS ARE ALLOWED. SERIALIZABLE, CLONEABLE,RANDOM ACESS INTERFACE.
 *   BEST CHOICE  FOR RETRIVAL OPERATION.
 *  
 *  
 */

	}

}
